// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: race/race.proto

#ifndef PROTOBUF_race_2frace_2eproto__INCLUDED
#define PROTOBUF_race_2frace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace race {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_race_2frace_2eproto();
void protobuf_AssignDesc_race_2frace_2eproto();
void protobuf_ShutdownFile_race_2frace_2eproto();

class StaticRaceEventProto;
class StaticRaceProto;
class RaceEventProto;
class RaceProto;
class RaceDBProto;

enum RaceEventType {
  RACE_EVENT_INVALID = 0,
  RACE_EVENT_READ = 1,
  RACE_EVENT_WRITE = 2
};
bool RaceEventType_IsValid(int value);
const RaceEventType RaceEventType_MIN = RACE_EVENT_INVALID;
const RaceEventType RaceEventType_MAX = RACE_EVENT_WRITE;
const int RaceEventType_ARRAYSIZE = RaceEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaceEventType_descriptor();
inline const ::std::string& RaceEventType_Name(RaceEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaceEventType_descriptor(), value);
}
inline bool RaceEventType_Parse(
    const ::std::string& name, RaceEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaceEventType>(
    RaceEventType_descriptor(), name, value);
}
// ===================================================================

class StaticRaceEventProto : public ::google::protobuf::Message {
 public:
  StaticRaceEventProto();
  virtual ~StaticRaceEventProto();

  StaticRaceEventProto(const StaticRaceEventProto& from);

  inline StaticRaceEventProto& operator=(const StaticRaceEventProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticRaceEventProto& default_instance();

  void Swap(StaticRaceEventProto* other);

  // implements Message ----------------------------------------------

  StaticRaceEventProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticRaceEventProto& from);
  void MergeFrom(const StaticRaceEventProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 inst_id = 2;
  inline bool has_inst_id() const;
  inline void clear_inst_id();
  static const int kInstIdFieldNumber = 2;
  inline ::google::protobuf::uint32 inst_id() const;
  inline void set_inst_id(::google::protobuf::uint32 value);

  // required .race.RaceEventType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::race::RaceEventType type() const;
  inline void set_type(::race::RaceEventType value);

  // @@protoc_insertion_point(class_scope:race.StaticRaceEventProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inst_id();
  inline void clear_has_inst_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 inst_id_;
  int type_;
  friend void  protobuf_AddDesc_race_2frace_2eproto();
  friend void protobuf_AssignDesc_race_2frace_2eproto();
  friend void protobuf_ShutdownFile_race_2frace_2eproto();

  void InitAsDefaultInstance();
  static StaticRaceEventProto* default_instance_;
};
// -------------------------------------------------------------------

class StaticRaceProto : public ::google::protobuf::Message {
 public:
  StaticRaceProto();
  virtual ~StaticRaceProto();

  StaticRaceProto(const StaticRaceProto& from);

  inline StaticRaceProto& operator=(const StaticRaceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticRaceProto& default_instance();

  void Swap(StaticRaceProto* other);

  // implements Message ----------------------------------------------

  StaticRaceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticRaceProto& from);
  void MergeFrom(const StaticRaceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 event_id = 2;
  inline int event_id_size() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint32 event_id(int index) const;
  inline void set_event_id(int index, ::google::protobuf::uint32 value);
  inline void add_event_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      event_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_event_id();

  // @@protoc_insertion_point(class_scope:race.StaticRaceProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > event_id_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_race_2frace_2eproto();
  friend void protobuf_AssignDesc_race_2frace_2eproto();
  friend void protobuf_ShutdownFile_race_2frace_2eproto();

  void InitAsDefaultInstance();
  static StaticRaceProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceEventProto : public ::google::protobuf::Message {
 public:
  RaceEventProto();
  virtual ~RaceEventProto();

  RaceEventProto(const RaceEventProto& from);

  inline RaceEventProto& operator=(const RaceEventProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceEventProto& default_instance();

  void Swap(RaceEventProto* other);

  // implements Message ----------------------------------------------

  RaceEventProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceEventProto& from);
  void MergeFrom(const RaceEventProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 thd_id = 1;
  inline bool has_thd_id() const;
  inline void clear_thd_id();
  static const int kThdIdFieldNumber = 1;
  inline ::google::protobuf::uint64 thd_id() const;
  inline void set_thd_id(::google::protobuf::uint64 value);

  // required uint32 static_id = 2;
  inline bool has_static_id() const;
  inline void clear_static_id();
  static const int kStaticIdFieldNumber = 2;
  inline ::google::protobuf::uint32 static_id() const;
  inline void set_static_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:race.RaceEventProto)
 private:
  inline void set_has_thd_id();
  inline void clear_has_thd_id();
  inline void set_has_static_id();
  inline void clear_has_static_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 thd_id_;
  ::google::protobuf::uint32 static_id_;
  friend void  protobuf_AddDesc_race_2frace_2eproto();
  friend void protobuf_AssignDesc_race_2frace_2eproto();
  friend void protobuf_ShutdownFile_race_2frace_2eproto();

  void InitAsDefaultInstance();
  static RaceEventProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceProto : public ::google::protobuf::Message {
 public:
  RaceProto();
  virtual ~RaceProto();

  RaceProto(const RaceProto& from);

  inline RaceProto& operator=(const RaceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceProto& default_instance();

  void Swap(RaceProto* other);

  // implements Message ----------------------------------------------

  RaceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceProto& from);
  void MergeFrom(const RaceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 exec_id = 1;
  inline bool has_exec_id() const;
  inline void clear_exec_id();
  static const int kExecIdFieldNumber = 1;
  inline ::google::protobuf::uint32 exec_id() const;
  inline void set_exec_id(::google::protobuf::uint32 value);

  // required uint64 addr = 2;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 2;
  inline ::google::protobuf::uint64 addr() const;
  inline void set_addr(::google::protobuf::uint64 value);

  // repeated .race.RaceEventProto event = 3;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::race::RaceEventProto& event(int index) const;
  inline ::race::RaceEventProto* mutable_event(int index);
  inline ::race::RaceEventProto* add_event();
  inline const ::google::protobuf::RepeatedPtrField< ::race::RaceEventProto >&
      event() const;
  inline ::google::protobuf::RepeatedPtrField< ::race::RaceEventProto >*
      mutable_event();

  // required uint32 static_id = 4;
  inline bool has_static_id() const;
  inline void clear_static_id();
  static const int kStaticIdFieldNumber = 4;
  inline ::google::protobuf::uint32 static_id() const;
  inline void set_static_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:race.RaceProto)
 private:
  inline void set_has_exec_id();
  inline void clear_has_exec_id();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_static_id();
  inline void clear_has_static_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 addr_;
  ::google::protobuf::uint32 exec_id_;
  ::google::protobuf::uint32 static_id_;
  ::google::protobuf::RepeatedPtrField< ::race::RaceEventProto > event_;
  friend void  protobuf_AddDesc_race_2frace_2eproto();
  friend void protobuf_AssignDesc_race_2frace_2eproto();
  friend void protobuf_ShutdownFile_race_2frace_2eproto();

  void InitAsDefaultInstance();
  static RaceProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceDBProto : public ::google::protobuf::Message {
 public:
  RaceDBProto();
  virtual ~RaceDBProto();

  RaceDBProto(const RaceDBProto& from);

  inline RaceDBProto& operator=(const RaceDBProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceDBProto& default_instance();

  void Swap(RaceDBProto* other);

  // implements Message ----------------------------------------------

  RaceDBProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceDBProto& from);
  void MergeFrom(const RaceDBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .race.StaticRaceEventProto static_event = 1;
  inline int static_event_size() const;
  inline void clear_static_event();
  static const int kStaticEventFieldNumber = 1;
  inline const ::race::StaticRaceEventProto& static_event(int index) const;
  inline ::race::StaticRaceEventProto* mutable_static_event(int index);
  inline ::race::StaticRaceEventProto* add_static_event();
  inline const ::google::protobuf::RepeatedPtrField< ::race::StaticRaceEventProto >&
      static_event() const;
  inline ::google::protobuf::RepeatedPtrField< ::race::StaticRaceEventProto >*
      mutable_static_event();

  // repeated .race.StaticRaceProto static_race = 2;
  inline int static_race_size() const;
  inline void clear_static_race();
  static const int kStaticRaceFieldNumber = 2;
  inline const ::race::StaticRaceProto& static_race(int index) const;
  inline ::race::StaticRaceProto* mutable_static_race(int index);
  inline ::race::StaticRaceProto* add_static_race();
  inline const ::google::protobuf::RepeatedPtrField< ::race::StaticRaceProto >&
      static_race() const;
  inline ::google::protobuf::RepeatedPtrField< ::race::StaticRaceProto >*
      mutable_static_race();

  // repeated .race.RaceProto race = 3;
  inline int race_size() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 3;
  inline const ::race::RaceProto& race(int index) const;
  inline ::race::RaceProto* mutable_race(int index);
  inline ::race::RaceProto* add_race();
  inline const ::google::protobuf::RepeatedPtrField< ::race::RaceProto >&
      race() const;
  inline ::google::protobuf::RepeatedPtrField< ::race::RaceProto >*
      mutable_race();

  // repeated uint32 racy_inst_id = 4;
  inline int racy_inst_id_size() const;
  inline void clear_racy_inst_id();
  static const int kRacyInstIdFieldNumber = 4;
  inline ::google::protobuf::uint32 racy_inst_id(int index) const;
  inline void set_racy_inst_id(int index, ::google::protobuf::uint32 value);
  inline void add_racy_inst_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      racy_inst_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_racy_inst_id();

  // @@protoc_insertion_point(class_scope:race.RaceDBProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::race::StaticRaceEventProto > static_event_;
  ::google::protobuf::RepeatedPtrField< ::race::StaticRaceProto > static_race_;
  ::google::protobuf::RepeatedPtrField< ::race::RaceProto > race_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > racy_inst_id_;
  friend void  protobuf_AddDesc_race_2frace_2eproto();
  friend void protobuf_AssignDesc_race_2frace_2eproto();
  friend void protobuf_ShutdownFile_race_2frace_2eproto();

  void InitAsDefaultInstance();
  static RaceDBProto* default_instance_;
};
// ===================================================================


// ===================================================================

// StaticRaceEventProto

// required uint32 id = 1;
inline bool StaticRaceEventProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticRaceEventProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticRaceEventProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticRaceEventProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StaticRaceEventProto::id() const {
  // @@protoc_insertion_point(field_get:race.StaticRaceEventProto.id)
  return id_;
}
inline void StaticRaceEventProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:race.StaticRaceEventProto.id)
}

// required uint32 inst_id = 2;
inline bool StaticRaceEventProto::has_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticRaceEventProto::set_has_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticRaceEventProto::clear_has_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StaticRaceEventProto::clear_inst_id() {
  inst_id_ = 0u;
  clear_has_inst_id();
}
inline ::google::protobuf::uint32 StaticRaceEventProto::inst_id() const {
  // @@protoc_insertion_point(field_get:race.StaticRaceEventProto.inst_id)
  return inst_id_;
}
inline void StaticRaceEventProto::set_inst_id(::google::protobuf::uint32 value) {
  set_has_inst_id();
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:race.StaticRaceEventProto.inst_id)
}

// required .race.RaceEventType type = 3;
inline bool StaticRaceEventProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StaticRaceEventProto::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StaticRaceEventProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StaticRaceEventProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::race::RaceEventType StaticRaceEventProto::type() const {
  // @@protoc_insertion_point(field_get:race.StaticRaceEventProto.type)
  return static_cast< ::race::RaceEventType >(type_);
}
inline void StaticRaceEventProto::set_type(::race::RaceEventType value) {
  assert(::race::RaceEventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:race.StaticRaceEventProto.type)
}

// -------------------------------------------------------------------

// StaticRaceProto

// required uint32 id = 1;
inline bool StaticRaceProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticRaceProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticRaceProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticRaceProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 StaticRaceProto::id() const {
  // @@protoc_insertion_point(field_get:race.StaticRaceProto.id)
  return id_;
}
inline void StaticRaceProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:race.StaticRaceProto.id)
}

// repeated uint32 event_id = 2;
inline int StaticRaceProto::event_id_size() const {
  return event_id_.size();
}
inline void StaticRaceProto::clear_event_id() {
  event_id_.Clear();
}
inline ::google::protobuf::uint32 StaticRaceProto::event_id(int index) const {
  // @@protoc_insertion_point(field_get:race.StaticRaceProto.event_id)
  return event_id_.Get(index);
}
inline void StaticRaceProto::set_event_id(int index, ::google::protobuf::uint32 value) {
  event_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:race.StaticRaceProto.event_id)
}
inline void StaticRaceProto::add_event_id(::google::protobuf::uint32 value) {
  event_id_.Add(value);
  // @@protoc_insertion_point(field_add:race.StaticRaceProto.event_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StaticRaceProto::event_id() const {
  // @@protoc_insertion_point(field_list:race.StaticRaceProto.event_id)
  return event_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StaticRaceProto::mutable_event_id() {
  // @@protoc_insertion_point(field_mutable_list:race.StaticRaceProto.event_id)
  return &event_id_;
}

// -------------------------------------------------------------------

// RaceEventProto

// required uint64 thd_id = 1;
inline bool RaceEventProto::has_thd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceEventProto::set_has_thd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceEventProto::clear_has_thd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceEventProto::clear_thd_id() {
  thd_id_ = GOOGLE_ULONGLONG(0);
  clear_has_thd_id();
}
inline ::google::protobuf::uint64 RaceEventProto::thd_id() const {
  // @@protoc_insertion_point(field_get:race.RaceEventProto.thd_id)
  return thd_id_;
}
inline void RaceEventProto::set_thd_id(::google::protobuf::uint64 value) {
  set_has_thd_id();
  thd_id_ = value;
  // @@protoc_insertion_point(field_set:race.RaceEventProto.thd_id)
}

// required uint32 static_id = 2;
inline bool RaceEventProto::has_static_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceEventProto::set_has_static_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceEventProto::clear_has_static_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceEventProto::clear_static_id() {
  static_id_ = 0u;
  clear_has_static_id();
}
inline ::google::protobuf::uint32 RaceEventProto::static_id() const {
  // @@protoc_insertion_point(field_get:race.RaceEventProto.static_id)
  return static_id_;
}
inline void RaceEventProto::set_static_id(::google::protobuf::uint32 value) {
  set_has_static_id();
  static_id_ = value;
  // @@protoc_insertion_point(field_set:race.RaceEventProto.static_id)
}

// -------------------------------------------------------------------

// RaceProto

// required uint32 exec_id = 1;
inline bool RaceProto::has_exec_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceProto::set_has_exec_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceProto::clear_has_exec_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceProto::clear_exec_id() {
  exec_id_ = 0u;
  clear_has_exec_id();
}
inline ::google::protobuf::uint32 RaceProto::exec_id() const {
  // @@protoc_insertion_point(field_get:race.RaceProto.exec_id)
  return exec_id_;
}
inline void RaceProto::set_exec_id(::google::protobuf::uint32 value) {
  set_has_exec_id();
  exec_id_ = value;
  // @@protoc_insertion_point(field_set:race.RaceProto.exec_id)
}

// required uint64 addr = 2;
inline bool RaceProto::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceProto::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceProto::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceProto::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
inline ::google::protobuf::uint64 RaceProto::addr() const {
  // @@protoc_insertion_point(field_get:race.RaceProto.addr)
  return addr_;
}
inline void RaceProto::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:race.RaceProto.addr)
}

// repeated .race.RaceEventProto event = 3;
inline int RaceProto::event_size() const {
  return event_.size();
}
inline void RaceProto::clear_event() {
  event_.Clear();
}
inline const ::race::RaceEventProto& RaceProto::event(int index) const {
  // @@protoc_insertion_point(field_get:race.RaceProto.event)
  return event_.Get(index);
}
inline ::race::RaceEventProto* RaceProto::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:race.RaceProto.event)
  return event_.Mutable(index);
}
inline ::race::RaceEventProto* RaceProto::add_event() {
  // @@protoc_insertion_point(field_add:race.RaceProto.event)
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::race::RaceEventProto >&
RaceProto::event() const {
  // @@protoc_insertion_point(field_list:race.RaceProto.event)
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::race::RaceEventProto >*
RaceProto::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:race.RaceProto.event)
  return &event_;
}

// required uint32 static_id = 4;
inline bool RaceProto::has_static_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaceProto::set_has_static_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaceProto::clear_has_static_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaceProto::clear_static_id() {
  static_id_ = 0u;
  clear_has_static_id();
}
inline ::google::protobuf::uint32 RaceProto::static_id() const {
  // @@protoc_insertion_point(field_get:race.RaceProto.static_id)
  return static_id_;
}
inline void RaceProto::set_static_id(::google::protobuf::uint32 value) {
  set_has_static_id();
  static_id_ = value;
  // @@protoc_insertion_point(field_set:race.RaceProto.static_id)
}

// -------------------------------------------------------------------

// RaceDBProto

// repeated .race.StaticRaceEventProto static_event = 1;
inline int RaceDBProto::static_event_size() const {
  return static_event_.size();
}
inline void RaceDBProto::clear_static_event() {
  static_event_.Clear();
}
inline const ::race::StaticRaceEventProto& RaceDBProto::static_event(int index) const {
  // @@protoc_insertion_point(field_get:race.RaceDBProto.static_event)
  return static_event_.Get(index);
}
inline ::race::StaticRaceEventProto* RaceDBProto::mutable_static_event(int index) {
  // @@protoc_insertion_point(field_mutable:race.RaceDBProto.static_event)
  return static_event_.Mutable(index);
}
inline ::race::StaticRaceEventProto* RaceDBProto::add_static_event() {
  // @@protoc_insertion_point(field_add:race.RaceDBProto.static_event)
  return static_event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::race::StaticRaceEventProto >&
RaceDBProto::static_event() const {
  // @@protoc_insertion_point(field_list:race.RaceDBProto.static_event)
  return static_event_;
}
inline ::google::protobuf::RepeatedPtrField< ::race::StaticRaceEventProto >*
RaceDBProto::mutable_static_event() {
  // @@protoc_insertion_point(field_mutable_list:race.RaceDBProto.static_event)
  return &static_event_;
}

// repeated .race.StaticRaceProto static_race = 2;
inline int RaceDBProto::static_race_size() const {
  return static_race_.size();
}
inline void RaceDBProto::clear_static_race() {
  static_race_.Clear();
}
inline const ::race::StaticRaceProto& RaceDBProto::static_race(int index) const {
  // @@protoc_insertion_point(field_get:race.RaceDBProto.static_race)
  return static_race_.Get(index);
}
inline ::race::StaticRaceProto* RaceDBProto::mutable_static_race(int index) {
  // @@protoc_insertion_point(field_mutable:race.RaceDBProto.static_race)
  return static_race_.Mutable(index);
}
inline ::race::StaticRaceProto* RaceDBProto::add_static_race() {
  // @@protoc_insertion_point(field_add:race.RaceDBProto.static_race)
  return static_race_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::race::StaticRaceProto >&
RaceDBProto::static_race() const {
  // @@protoc_insertion_point(field_list:race.RaceDBProto.static_race)
  return static_race_;
}
inline ::google::protobuf::RepeatedPtrField< ::race::StaticRaceProto >*
RaceDBProto::mutable_static_race() {
  // @@protoc_insertion_point(field_mutable_list:race.RaceDBProto.static_race)
  return &static_race_;
}

// repeated .race.RaceProto race = 3;
inline int RaceDBProto::race_size() const {
  return race_.size();
}
inline void RaceDBProto::clear_race() {
  race_.Clear();
}
inline const ::race::RaceProto& RaceDBProto::race(int index) const {
  // @@protoc_insertion_point(field_get:race.RaceDBProto.race)
  return race_.Get(index);
}
inline ::race::RaceProto* RaceDBProto::mutable_race(int index) {
  // @@protoc_insertion_point(field_mutable:race.RaceDBProto.race)
  return race_.Mutable(index);
}
inline ::race::RaceProto* RaceDBProto::add_race() {
  // @@protoc_insertion_point(field_add:race.RaceDBProto.race)
  return race_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::race::RaceProto >&
RaceDBProto::race() const {
  // @@protoc_insertion_point(field_list:race.RaceDBProto.race)
  return race_;
}
inline ::google::protobuf::RepeatedPtrField< ::race::RaceProto >*
RaceDBProto::mutable_race() {
  // @@protoc_insertion_point(field_mutable_list:race.RaceDBProto.race)
  return &race_;
}

// repeated uint32 racy_inst_id = 4;
inline int RaceDBProto::racy_inst_id_size() const {
  return racy_inst_id_.size();
}
inline void RaceDBProto::clear_racy_inst_id() {
  racy_inst_id_.Clear();
}
inline ::google::protobuf::uint32 RaceDBProto::racy_inst_id(int index) const {
  // @@protoc_insertion_point(field_get:race.RaceDBProto.racy_inst_id)
  return racy_inst_id_.Get(index);
}
inline void RaceDBProto::set_racy_inst_id(int index, ::google::protobuf::uint32 value) {
  racy_inst_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:race.RaceDBProto.racy_inst_id)
}
inline void RaceDBProto::add_racy_inst_id(::google::protobuf::uint32 value) {
  racy_inst_id_.Add(value);
  // @@protoc_insertion_point(field_add:race.RaceDBProto.racy_inst_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RaceDBProto::racy_inst_id() const {
  // @@protoc_insertion_point(field_list:race.RaceDBProto.racy_inst_id)
  return racy_inst_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RaceDBProto::mutable_racy_inst_id() {
  // @@protoc_insertion_point(field_mutable_list:race.RaceDBProto.racy_inst_id)
  return &racy_inst_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace race

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::race::RaceEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::race::RaceEventType>() {
  return ::race::RaceEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_race_2frace_2eproto__INCLUDED
