// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: race/race.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "race/race.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace race {

namespace {

const ::google::protobuf::Descriptor* StaticRaceEventProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticRaceEventProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticRaceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticRaceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceEventProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceEventProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceDBProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RaceEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_race_2frace_2eproto() {
  protobuf_AddDesc_race_2frace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "race/race.proto");
  GOOGLE_CHECK(file != NULL);
  StaticRaceEventProto_descriptor_ = file->message_type(0);
  static const int StaticRaceEventProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceEventProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceEventProto, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceEventProto, type_),
  };
  StaticRaceEventProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticRaceEventProto_descriptor_,
      StaticRaceEventProto::default_instance_,
      StaticRaceEventProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceEventProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceEventProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticRaceEventProto));
  StaticRaceProto_descriptor_ = file->message_type(1);
  static const int StaticRaceProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceProto, event_id_),
  };
  StaticRaceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticRaceProto_descriptor_,
      StaticRaceProto::default_instance_,
      StaticRaceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticRaceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticRaceProto));
  RaceEventProto_descriptor_ = file->message_type(2);
  static const int RaceEventProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventProto, thd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventProto, static_id_),
  };
  RaceEventProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceEventProto_descriptor_,
      RaceEventProto::default_instance_,
      RaceEventProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceEventProto));
  RaceProto_descriptor_ = file->message_type(3);
  static const int RaceProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, static_id_),
  };
  RaceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceProto_descriptor_,
      RaceProto::default_instance_,
      RaceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceProto));
  RaceDBProto_descriptor_ = file->message_type(4);
  static const int RaceDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, static_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, static_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, racy_inst_id_),
  };
  RaceDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceDBProto_descriptor_,
      RaceDBProto::default_instance_,
      RaceDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceDBProto));
  RaceEventType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_race_2frace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticRaceEventProto_descriptor_, &StaticRaceEventProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticRaceProto_descriptor_, &StaticRaceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceEventProto_descriptor_, &RaceEventProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceProto_descriptor_, &RaceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceDBProto_descriptor_, &RaceDBProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_race_2frace_2eproto() {
  delete StaticRaceEventProto::default_instance_;
  delete StaticRaceEventProto_reflection_;
  delete StaticRaceProto::default_instance_;
  delete StaticRaceProto_reflection_;
  delete RaceEventProto::default_instance_;
  delete RaceEventProto_reflection_;
  delete RaceProto::default_instance_;
  delete RaceProto_reflection_;
  delete RaceDBProto::default_instance_;
  delete RaceDBProto_reflection_;
}

void protobuf_AddDesc_race_2frace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017race/race.proto\022\004race\"V\n\024StaticRaceEve"
    "ntProto\022\n\n\002id\030\001 \002(\r\022\017\n\007inst_id\030\002 \002(\r\022!\n\004"
    "type\030\003 \002(\0162\023.race.RaceEventType\"/\n\017Stati"
    "cRaceProto\022\n\n\002id\030\001 \002(\r\022\020\n\010event_id\030\002 \003(\r"
    "\"3\n\016RaceEventProto\022\016\n\006thd_id\030\001 \002(\004\022\021\n\tst"
    "atic_id\030\002 \002(\r\"b\n\tRaceProto\022\017\n\007exec_id\030\001 "
    "\002(\r\022\014\n\004addr\030\002 \002(\004\022#\n\005event\030\003 \003(\0132\024.race."
    "RaceEventProto\022\021\n\tstatic_id\030\004 \002(\r\"\240\001\n\013Ra"
    "ceDBProto\0220\n\014static_event\030\001 \003(\0132\032.race.S"
    "taticRaceEventProto\022*\n\013static_race\030\002 \003(\013"
    "2\025.race.StaticRaceProto\022\035\n\004race\030\003 \003(\0132\017."
    "race.RaceProto\022\024\n\014racy_inst_id\030\004 \003(\r*R\n\r"
    "RaceEventType\022\026\n\022RACE_EVENT_INVALID\020\000\022\023\n"
    "\017RACE_EVENT_READ\020\001\022\024\n\020RACE_EVENT_WRITE\020\002", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "race/race.proto", &protobuf_RegisterTypes);
  StaticRaceEventProto::default_instance_ = new StaticRaceEventProto();
  StaticRaceProto::default_instance_ = new StaticRaceProto();
  RaceEventProto::default_instance_ = new RaceEventProto();
  RaceProto::default_instance_ = new RaceProto();
  RaceDBProto::default_instance_ = new RaceDBProto();
  StaticRaceEventProto::default_instance_->InitAsDefaultInstance();
  StaticRaceProto::default_instance_->InitAsDefaultInstance();
  RaceEventProto::default_instance_->InitAsDefaultInstance();
  RaceProto::default_instance_->InitAsDefaultInstance();
  RaceDBProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_race_2frace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_race_2frace_2eproto {
  StaticDescriptorInitializer_race_2frace_2eproto() {
    protobuf_AddDesc_race_2frace_2eproto();
  }
} static_descriptor_initializer_race_2frace_2eproto_;
const ::google::protobuf::EnumDescriptor* RaceEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceEventType_descriptor_;
}
bool RaceEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StaticRaceEventProto::kIdFieldNumber;
const int StaticRaceEventProto::kInstIdFieldNumber;
const int StaticRaceEventProto::kTypeFieldNumber;
#endif  // !_MSC_VER

StaticRaceEventProto::StaticRaceEventProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:race.StaticRaceEventProto)
}

void StaticRaceEventProto::InitAsDefaultInstance() {
}

StaticRaceEventProto::StaticRaceEventProto(const StaticRaceEventProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:race.StaticRaceEventProto)
}

void StaticRaceEventProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  inst_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticRaceEventProto::~StaticRaceEventProto() {
  // @@protoc_insertion_point(destructor:race.StaticRaceEventProto)
  SharedDtor();
}

void StaticRaceEventProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaticRaceEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticRaceEventProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticRaceEventProto_descriptor_;
}

const StaticRaceEventProto& StaticRaceEventProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_race_2frace_2eproto();
  return *default_instance_;
}

StaticRaceEventProto* StaticRaceEventProto::default_instance_ = NULL;

StaticRaceEventProto* StaticRaceEventProto::New() const {
  return new StaticRaceEventProto;
}

void StaticRaceEventProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StaticRaceEventProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticRaceEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:race.StaticRaceEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inst_id;
        break;
      }

      // required uint32 inst_id = 2;
      case 2: {
        if (tag == 16) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .race.RaceEventType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::race::RaceEventType_IsValid(value)) {
            set_type(static_cast< ::race::RaceEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:race.StaticRaceEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:race.StaticRaceEventProto)
  return false;
#undef DO_
}

void StaticRaceEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:race.StaticRaceEventProto)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 inst_id = 2;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inst_id(), output);
  }

  // required .race.RaceEventType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:race.StaticRaceEventProto)
}

::google::protobuf::uint8* StaticRaceEventProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:race.StaticRaceEventProto)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 inst_id = 2;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inst_id(), target);
  }

  // required .race.RaceEventType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:race.StaticRaceEventProto)
  return target;
}

int StaticRaceEventProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 inst_id = 2;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inst_id());
    }

    // required .race.RaceEventType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticRaceEventProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticRaceEventProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticRaceEventProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticRaceEventProto::MergeFrom(const StaticRaceEventProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticRaceEventProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticRaceEventProto::CopyFrom(const StaticRaceEventProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticRaceEventProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StaticRaceEventProto::Swap(StaticRaceEventProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticRaceEventProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticRaceEventProto_descriptor_;
  metadata.reflection = StaticRaceEventProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticRaceProto::kIdFieldNumber;
const int StaticRaceProto::kEventIdFieldNumber;
#endif  // !_MSC_VER

StaticRaceProto::StaticRaceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:race.StaticRaceProto)
}

void StaticRaceProto::InitAsDefaultInstance() {
}

StaticRaceProto::StaticRaceProto(const StaticRaceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:race.StaticRaceProto)
}

void StaticRaceProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticRaceProto::~StaticRaceProto() {
  // @@protoc_insertion_point(destructor:race.StaticRaceProto)
  SharedDtor();
}

void StaticRaceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaticRaceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticRaceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticRaceProto_descriptor_;
}

const StaticRaceProto& StaticRaceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_race_2frace_2eproto();
  return *default_instance_;
}

StaticRaceProto* StaticRaceProto::default_instance_ = NULL;

StaticRaceProto* StaticRaceProto::New() const {
  return new StaticRaceProto;
}

void StaticRaceProto::Clear() {
  id_ = 0u;
  event_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticRaceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:race.StaticRaceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // repeated uint32 event_id = 2;
      case 2: {
        if (tag == 16) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_event_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_event_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:race.StaticRaceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:race.StaticRaceProto)
  return false;
#undef DO_
}

void StaticRaceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:race.StaticRaceProto)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 event_id = 2;
  for (int i = 0; i < this->event_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->event_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:race.StaticRaceProto)
}

::google::protobuf::uint8* StaticRaceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:race.StaticRaceProto)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 event_id = 2;
  for (int i = 0; i < this->event_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->event_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:race.StaticRaceProto)
  return target;
}

int StaticRaceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 event_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->event_id(i));
    }
    total_size += 1 * this->event_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticRaceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticRaceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticRaceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticRaceProto::MergeFrom(const StaticRaceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_id_.MergeFrom(from.event_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticRaceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticRaceProto::CopyFrom(const StaticRaceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticRaceProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StaticRaceProto::Swap(StaticRaceProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    event_id_.Swap(&other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticRaceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticRaceProto_descriptor_;
  metadata.reflection = StaticRaceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceEventProto::kThdIdFieldNumber;
const int RaceEventProto::kStaticIdFieldNumber;
#endif  // !_MSC_VER

RaceEventProto::RaceEventProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:race.RaceEventProto)
}

void RaceEventProto::InitAsDefaultInstance() {
}

RaceEventProto::RaceEventProto(const RaceEventProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:race.RaceEventProto)
}

void RaceEventProto::SharedCtor() {
  _cached_size_ = 0;
  thd_id_ = GOOGLE_ULONGLONG(0);
  static_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceEventProto::~RaceEventProto() {
  // @@protoc_insertion_point(destructor:race.RaceEventProto)
  SharedDtor();
}

void RaceEventProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceEventProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceEventProto_descriptor_;
}

const RaceEventProto& RaceEventProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_race_2frace_2eproto();
  return *default_instance_;
}

RaceEventProto* RaceEventProto::default_instance_ = NULL;

RaceEventProto* RaceEventProto::New() const {
  return new RaceEventProto;
}

void RaceEventProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceEventProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(thd_id_, static_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:race.RaceEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 thd_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thd_id_)));
          set_has_thd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_static_id;
        break;
      }

      // required uint32 static_id = 2;
      case 2: {
        if (tag == 16) {
         parse_static_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &static_id_)));
          set_has_static_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:race.RaceEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:race.RaceEventProto)
  return false;
#undef DO_
}

void RaceEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:race.RaceEventProto)
  // required uint64 thd_id = 1;
  if (has_thd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thd_id(), output);
  }

  // required uint32 static_id = 2;
  if (has_static_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->static_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:race.RaceEventProto)
}

::google::protobuf::uint8* RaceEventProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:race.RaceEventProto)
  // required uint64 thd_id = 1;
  if (has_thd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thd_id(), target);
  }

  // required uint32 static_id = 2;
  if (has_static_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->static_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:race.RaceEventProto)
  return target;
}

int RaceEventProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 thd_id = 1;
    if (has_thd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thd_id());
    }

    // required uint32 static_id = 2;
    if (has_static_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->static_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceEventProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceEventProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceEventProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceEventProto::MergeFrom(const RaceEventProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thd_id()) {
      set_thd_id(from.thd_id());
    }
    if (from.has_static_id()) {
      set_static_id(from.static_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceEventProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceEventProto::CopyFrom(const RaceEventProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceEventProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RaceEventProto::Swap(RaceEventProto* other) {
  if (other != this) {
    std::swap(thd_id_, other->thd_id_);
    std::swap(static_id_, other->static_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceEventProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceEventProto_descriptor_;
  metadata.reflection = RaceEventProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceProto::kExecIdFieldNumber;
const int RaceProto::kAddrFieldNumber;
const int RaceProto::kEventFieldNumber;
const int RaceProto::kStaticIdFieldNumber;
#endif  // !_MSC_VER

RaceProto::RaceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:race.RaceProto)
}

void RaceProto::InitAsDefaultInstance() {
}

RaceProto::RaceProto(const RaceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:race.RaceProto)
}

void RaceProto::SharedCtor() {
  _cached_size_ = 0;
  exec_id_ = 0u;
  addr_ = GOOGLE_ULONGLONG(0);
  static_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceProto::~RaceProto() {
  // @@protoc_insertion_point(destructor:race.RaceProto)
  SharedDtor();
}

void RaceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceProto_descriptor_;
}

const RaceProto& RaceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_race_2frace_2eproto();
  return *default_instance_;
}

RaceProto* RaceProto::default_instance_ = NULL;

RaceProto* RaceProto::New() const {
  return new RaceProto;
}

void RaceProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(addr_, static_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:race.RaceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exec_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exec_id_)));
          set_has_exec_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // required uint64 addr = 2;
      case 2: {
        if (tag == 16) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }

      // repeated .race.RaceEventProto event = 3;
      case 3: {
        if (tag == 26) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event;
        if (input->ExpectTag(32)) goto parse_static_id;
        break;
      }

      // required uint32 static_id = 4;
      case 4: {
        if (tag == 32) {
         parse_static_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &static_id_)));
          set_has_static_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:race.RaceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:race.RaceProto)
  return false;
#undef DO_
}

void RaceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:race.RaceProto)
  // required uint32 exec_id = 1;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exec_id(), output);
  }

  // required uint64 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->addr(), output);
  }

  // repeated .race.RaceEventProto event = 3;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event(i), output);
  }

  // required uint32 static_id = 4;
  if (has_static_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->static_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:race.RaceProto)
}

::google::protobuf::uint8* RaceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:race.RaceProto)
  // required uint32 exec_id = 1;
  if (has_exec_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exec_id(), target);
  }

  // required uint64 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->addr(), target);
  }

  // repeated .race.RaceEventProto event = 3;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event(i), target);
  }

  // required uint32 static_id = 4;
  if (has_static_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->static_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:race.RaceProto)
  return target;
}

int RaceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exec_id = 1;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exec_id());
    }

    // required uint64 addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }

    // required uint32 static_id = 4;
    if (has_static_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->static_id());
    }

  }
  // repeated .race.RaceEventProto event = 3;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceProto::MergeFrom(const RaceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_static_id()) {
      set_static_id(from.static_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceProto::CopyFrom(const RaceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  return true;
}

void RaceProto::Swap(RaceProto* other) {
  if (other != this) {
    std::swap(exec_id_, other->exec_id_);
    std::swap(addr_, other->addr_);
    event_.Swap(&other->event_);
    std::swap(static_id_, other->static_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceProto_descriptor_;
  metadata.reflection = RaceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceDBProto::kStaticEventFieldNumber;
const int RaceDBProto::kStaticRaceFieldNumber;
const int RaceDBProto::kRaceFieldNumber;
const int RaceDBProto::kRacyInstIdFieldNumber;
#endif  // !_MSC_VER

RaceDBProto::RaceDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:race.RaceDBProto)
}

void RaceDBProto::InitAsDefaultInstance() {
}

RaceDBProto::RaceDBProto(const RaceDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:race.RaceDBProto)
}

void RaceDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceDBProto::~RaceDBProto() {
  // @@protoc_insertion_point(destructor:race.RaceDBProto)
  SharedDtor();
}

void RaceDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceDBProto_descriptor_;
}

const RaceDBProto& RaceDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_race_2frace_2eproto();
  return *default_instance_;
}

RaceDBProto* RaceDBProto::default_instance_ = NULL;

RaceDBProto* RaceDBProto::New() const {
  return new RaceDBProto;
}

void RaceDBProto::Clear() {
  static_event_.Clear();
  static_race_.Clear();
  race_.Clear();
  racy_inst_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:race.RaceDBProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .race.StaticRaceEventProto static_event = 1;
      case 1: {
        if (tag == 10) {
         parse_static_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_static_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_static_event;
        if (input->ExpectTag(18)) goto parse_static_race;
        break;
      }

      // repeated .race.StaticRaceProto static_race = 2;
      case 2: {
        if (tag == 18) {
         parse_static_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_static_race()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_static_race;
        if (input->ExpectTag(26)) goto parse_race;
        break;
      }

      // repeated .race.RaceProto race = 3;
      case 3: {
        if (tag == 26) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_race()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_race;
        if (input->ExpectTag(32)) goto parse_racy_inst_id;
        break;
      }

      // repeated uint32 racy_inst_id = 4;
      case 4: {
        if (tag == 32) {
         parse_racy_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_racy_inst_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_racy_inst_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_racy_inst_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:race.RaceDBProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:race.RaceDBProto)
  return false;
#undef DO_
}

void RaceDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:race.RaceDBProto)
  // repeated .race.StaticRaceEventProto static_event = 1;
  for (int i = 0; i < this->static_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->static_event(i), output);
  }

  // repeated .race.StaticRaceProto static_race = 2;
  for (int i = 0; i < this->static_race_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->static_race(i), output);
  }

  // repeated .race.RaceProto race = 3;
  for (int i = 0; i < this->race_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->race(i), output);
  }

  // repeated uint32 racy_inst_id = 4;
  for (int i = 0; i < this->racy_inst_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->racy_inst_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:race.RaceDBProto)
}

::google::protobuf::uint8* RaceDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:race.RaceDBProto)
  // repeated .race.StaticRaceEventProto static_event = 1;
  for (int i = 0; i < this->static_event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->static_event(i), target);
  }

  // repeated .race.StaticRaceProto static_race = 2;
  for (int i = 0; i < this->static_race_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->static_race(i), target);
  }

  // repeated .race.RaceProto race = 3;
  for (int i = 0; i < this->race_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->race(i), target);
  }

  // repeated uint32 racy_inst_id = 4;
  for (int i = 0; i < this->racy_inst_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->racy_inst_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:race.RaceDBProto)
  return target;
}

int RaceDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .race.StaticRaceEventProto static_event = 1;
  total_size += 1 * this->static_event_size();
  for (int i = 0; i < this->static_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->static_event(i));
  }

  // repeated .race.StaticRaceProto static_race = 2;
  total_size += 1 * this->static_race_size();
  for (int i = 0; i < this->static_race_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->static_race(i));
  }

  // repeated .race.RaceProto race = 3;
  total_size += 1 * this->race_size();
  for (int i = 0; i < this->race_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->race(i));
  }

  // repeated uint32 racy_inst_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->racy_inst_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->racy_inst_id(i));
    }
    total_size += 1 * this->racy_inst_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceDBProto::MergeFrom(const RaceDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  static_event_.MergeFrom(from.static_event_);
  static_race_.MergeFrom(from.static_race_);
  race_.MergeFrom(from.race_);
  racy_inst_id_.MergeFrom(from.racy_inst_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceDBProto::CopyFrom(const RaceDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceDBProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->static_event())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->static_race())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->race())) return false;
  return true;
}

void RaceDBProto::Swap(RaceDBProto* other) {
  if (other != this) {
    static_event_.Swap(&other->static_event_);
    static_race_.Swap(&other->static_race_);
    race_.Swap(&other->race_);
    racy_inst_id_.Swap(&other->racy_inst_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceDBProto_descriptor_;
  metadata.reflection = RaceDBProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace race

// @@protoc_insertion_point(global_scope)
