// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/static_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core/static_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DebugInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticInfoProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto() {
  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core/static_info.proto");
  GOOGLE_CHECK(file != NULL);
  DebugInfoProto_descriptor_ = file->message_type(0);
  static const int DebugInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfoProto, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfoProto, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfoProto, column_),
  };
  DebugInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugInfoProto_descriptor_,
      DebugInfoProto::default_instance_,
      DebugInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugInfoProto));
  ImageProto_descriptor_ = file->message_type(1);
  static const int ImageProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, name_),
  };
  ImageProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageProto_descriptor_,
      ImageProto::default_instance_,
      ImageProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageProto));
  InstProto_descriptor_ = file->message_type(2);
  static const int InstProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, debug_info_),
  };
  InstProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstProto_descriptor_,
      InstProto::default_instance_,
      InstProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstProto));
  StaticInfoProto_descriptor_ = file->message_type(3);
  static const int StaticInfoProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoProto, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoProto, inst_),
  };
  StaticInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticInfoProto_descriptor_,
      StaticInfoProto::default_instance_,
      StaticInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticInfoProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2fstatic_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugInfoProto_descriptor_, &DebugInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageProto_descriptor_, &ImageProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstProto_descriptor_, &InstProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticInfoProto_descriptor_, &StaticInfoProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto() {
  delete DebugInfoProto::default_instance_;
  delete DebugInfoProto_reflection_;
  delete ImageProto::default_instance_;
  delete ImageProto_reflection_;
  delete InstProto::default_instance_;
  delete InstProto_reflection_;
  delete StaticInfoProto::default_instance_;
  delete StaticInfoProto_reflection_;
}

void protobuf_AddDesc_core_2fstatic_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026core/static_info.proto\"A\n\016DebugInfoPro"
    "to\022\021\n\tfile_name\030\001 \002(\t\022\014\n\004line\030\002 \002(\005\022\016\n\006c"
    "olumn\030\003 \002(\005\"&\n\nImageProto\022\n\n\002id\030\001 \002(\r\022\014\n"
    "\004name\030\002 \002(\t\"n\n\tInstProto\022\n\n\002id\030\001 \002(\r\022\020\n\010"
    "image_id\030\002 \002(\r\022\016\n\006offset\030\003 \002(\004\022\016\n\006opcode"
    "\030\004 \001(\r\022#\n\ndebug_info\030\005 \001(\0132\017.DebugInfoPr"
    "oto\"G\n\017StaticInfoProto\022\032\n\005image\030\001 \003(\0132\013."
    "ImageProto\022\030\n\004inst\030\002 \003(\0132\n.InstProto", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core/static_info.proto", &protobuf_RegisterTypes);
  DebugInfoProto::default_instance_ = new DebugInfoProto();
  ImageProto::default_instance_ = new ImageProto();
  InstProto::default_instance_ = new InstProto();
  StaticInfoProto::default_instance_ = new StaticInfoProto();
  DebugInfoProto::default_instance_->InitAsDefaultInstance();
  ImageProto::default_instance_->InitAsDefaultInstance();
  InstProto::default_instance_->InitAsDefaultInstance();
  StaticInfoProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2fstatic_5finfo_2eproto {
  StaticDescriptorInitializer_core_2fstatic_5finfo_2eproto() {
    protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  }
} static_descriptor_initializer_core_2fstatic_5finfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DebugInfoProto::kFileNameFieldNumber;
const int DebugInfoProto::kLineFieldNumber;
const int DebugInfoProto::kColumnFieldNumber;
#endif  // !_MSC_VER

DebugInfoProto::DebugInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DebugInfoProto)
}

void DebugInfoProto::InitAsDefaultInstance() {
}

DebugInfoProto::DebugInfoProto(const DebugInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DebugInfoProto)
}

void DebugInfoProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  column_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugInfoProto::~DebugInfoProto() {
  // @@protoc_insertion_point(destructor:DebugInfoProto)
  SharedDtor();
}

void DebugInfoProto::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void DebugInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugInfoProto_descriptor_;
}

const DebugInfoProto& DebugInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

DebugInfoProto* DebugInfoProto::default_instance_ = NULL;

DebugInfoProto* DebugInfoProto::New() const {
  return new DebugInfoProto;
}

void DebugInfoProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DebugInfoProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(line_, column_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DebugInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_line;
        break;
      }

      // required int32 line = 2;
      case 2: {
        if (tag == 16) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_column;
        break;
      }

      // required int32 column = 3;
      case 3: {
        if (tag == 24) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DebugInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DebugInfoProto)
  return false;
#undef DO_
}

void DebugInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DebugInfoProto)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required int32 line = 2;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // required int32 column = 3;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->column(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DebugInfoProto)
}

::google::protobuf::uint8* DebugInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DebugInfoProto)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required int32 line = 2;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // required int32 column = 3;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->column(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DebugInfoProto)
  return target;
}

int DebugInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required int32 line = 2;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // required int32 column = 3;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugInfoProto::MergeFrom(const DebugInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfoProto::CopyFrom(const DebugInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfoProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DebugInfoProto::Swap(DebugInfoProto* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(line_, other->line_);
    std::swap(column_, other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugInfoProto_descriptor_;
  metadata.reflection = DebugInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageProto::kIdFieldNumber;
const int ImageProto::kNameFieldNumber;
#endif  // !_MSC_VER

ImageProto::ImageProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageProto)
}

void ImageProto::InitAsDefaultInstance() {
}

ImageProto::ImageProto(const ImageProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImageProto)
}

void ImageProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageProto::~ImageProto() {
  // @@protoc_insertion_point(destructor:ImageProto)
  SharedDtor();
}

void ImageProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ImageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageProto_descriptor_;
}

const ImageProto& ImageProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

ImageProto* ImageProto::default_instance_ = NULL;

ImageProto* ImageProto::New() const {
  return new ImageProto;
}

void ImageProto::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageProto)
  return false;
#undef DO_
}

void ImageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageProto)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageProto)
}

::google::protobuf::uint8* ImageProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageProto)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageProto)
  return target;
}

int ImageProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageProto::MergeFrom(const ImageProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProto::CopyFrom(const ImageProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ImageProto::Swap(ImageProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageProto_descriptor_;
  metadata.reflection = ImageProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstProto::kIdFieldNumber;
const int InstProto::kImageIdFieldNumber;
const int InstProto::kOffsetFieldNumber;
const int InstProto::kOpcodeFieldNumber;
const int InstProto::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

InstProto::InstProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstProto)
}

void InstProto::InitAsDefaultInstance() {
  debug_info_ = const_cast< ::DebugInfoProto*>(&::DebugInfoProto::default_instance());
}

InstProto::InstProto(const InstProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstProto)
}

void InstProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  image_id_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  opcode_ = 0u;
  debug_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstProto::~InstProto() {
  // @@protoc_insertion_point(destructor:InstProto)
  SharedDtor();
}

void InstProto::SharedDtor() {
  if (this != default_instance_) {
    delete debug_info_;
  }
}

void InstProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstProto_descriptor_;
}

const InstProto& InstProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

InstProto* InstProto::default_instance_ = NULL;

InstProto* InstProto::New() const {
  return new InstProto;
}

void InstProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, offset_);
    opcode_ = 0u;
    if (has_debug_info()) {
      if (debug_info_ != NULL) debug_info_->::DebugInfoProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_image_id;
        break;
      }

      // required uint32 image_id = 2;
      case 2: {
        if (tag == 16) {
         parse_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_id_)));
          set_has_image_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint64 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opcode;
        break;
      }

      // optional uint32 opcode = 4;
      case 4: {
        if (tag == 32) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_debug_info;
        break;
      }

      // optional .DebugInfoProto debug_info = 5;
      case 5: {
        if (tag == 42) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstProto)
  return false;
#undef DO_
}

void InstProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstProto)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->image_id(), output);
  }

  // required uint64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  // optional uint32 opcode = 4;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opcode(), output);
  }

  // optional .DebugInfoProto debug_info = 5;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstProto)
}

::google::protobuf::uint8* InstProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstProto)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 image_id = 2;
  if (has_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->image_id(), target);
  }

  // required uint64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  // optional uint32 opcode = 4;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opcode(), target);
  }

  // optional .DebugInfoProto debug_info = 5;
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstProto)
  return target;
}

int InstProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 image_id = 2;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_id());
    }

    // required uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint32 opcode = 4;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }

    // optional .DebugInfoProto debug_info = 5;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstProto::MergeFrom(const InstProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_debug_info()) {
      mutable_debug_info()->::DebugInfoProto::MergeFrom(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstProto::CopyFrom(const InstProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_debug_info()) {
    if (!this->debug_info().IsInitialized()) return false;
  }
  return true;
}

void InstProto::Swap(InstProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(image_id_, other->image_id_);
    std::swap(offset_, other->offset_);
    std::swap(opcode_, other->opcode_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstProto_descriptor_;
  metadata.reflection = InstProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticInfoProto::kImageFieldNumber;
const int StaticInfoProto::kInstFieldNumber;
#endif  // !_MSC_VER

StaticInfoProto::StaticInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StaticInfoProto)
}

void StaticInfoProto::InitAsDefaultInstance() {
}

StaticInfoProto::StaticInfoProto(const StaticInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StaticInfoProto)
}

void StaticInfoProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticInfoProto::~StaticInfoProto() {
  // @@protoc_insertion_point(destructor:StaticInfoProto)
  SharedDtor();
}

void StaticInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaticInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticInfoProto_descriptor_;
}

const StaticInfoProto& StaticInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  return *default_instance_;
}

StaticInfoProto* StaticInfoProto::default_instance_ = NULL;

StaticInfoProto* StaticInfoProto::New() const {
  return new StaticInfoProto;
}

void StaticInfoProto::Clear() {
  image_.Clear();
  inst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StaticInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ImageProto image = 1;
      case 1: {
        if (tag == 10) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_image;
        if (input->ExpectTag(18)) goto parse_inst;
        break;
      }

      // repeated .InstProto inst = 2;
      case 2: {
        if (tag == 18) {
         parse_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StaticInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StaticInfoProto)
  return false;
#undef DO_
}

void StaticInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StaticInfoProto)
  // repeated .ImageProto image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(i), output);
  }

  // repeated .InstProto inst = 2;
  for (int i = 0; i < this->inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StaticInfoProto)
}

::google::protobuf::uint8* StaticInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StaticInfoProto)
  // repeated .ImageProto image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(i), target);
  }

  // repeated .InstProto inst = 2;
  for (int i = 0; i < this->inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StaticInfoProto)
  return target;
}

int StaticInfoProto::ByteSize() const {
  int total_size = 0;

  // repeated .ImageProto image = 1;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .InstProto inst = 2;
  total_size += 1 * this->inst_size();
  for (int i = 0; i < this->inst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticInfoProto::MergeFrom(const StaticInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  inst_.MergeFrom(from.inst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfoProto::CopyFrom(const StaticInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfoProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inst())) return false;
  return true;
}

void StaticInfoProto::Swap(StaticInfoProto* other) {
  if (other != this) {
    image_.Swap(&other->image_);
    inst_.Swap(&other->inst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticInfoProto_descriptor_;
  metadata.reflection = StaticInfoProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
