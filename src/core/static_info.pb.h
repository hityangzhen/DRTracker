// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/static_info.proto

#ifndef PROTOBUF_core_2fstatic_5finfo_2eproto__INCLUDED
#define PROTOBUF_core_2fstatic_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto();
void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto();

class DebugInfoProto;
class ImageProto;
class InstProto;
class StaticInfoProto;

// ===================================================================

class DebugInfoProto : public ::google::protobuf::Message {
 public:
  DebugInfoProto();
  virtual ~DebugInfoProto();

  DebugInfoProto(const DebugInfoProto& from);

  inline DebugInfoProto& operator=(const DebugInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfoProto& default_instance();

  void Swap(DebugInfoProto* other);

  // implements Message ----------------------------------------------

  DebugInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugInfoProto& from);
  void MergeFrom(const DebugInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required int32 line = 2;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);

  // required int32 column = 3;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 3;
  inline ::google::protobuf::int32 column() const;
  inline void set_column(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DebugInfoProto)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_column();
  inline void clear_has_column();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 column_;
  friend void  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto();

  void InitAsDefaultInstance();
  static DebugInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class ImageProto : public ::google::protobuf::Message {
 public:
  ImageProto();
  virtual ~ImageProto();

  ImageProto(const ImageProto& from);

  inline ImageProto& operator=(const ImageProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProto& default_instance();

  void Swap(ImageProto* other);

  // implements Message ----------------------------------------------

  ImageProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageProto& from);
  void MergeFrom(const ImageProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ImageProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ImageProto* default_instance_;
};
// -------------------------------------------------------------------

class InstProto : public ::google::protobuf::Message {
 public:
  InstProto();
  virtual ~InstProto();

  InstProto(const InstProto& from);

  inline InstProto& operator=(const InstProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstProto& default_instance();

  void Swap(InstProto* other);

  // implements Message ----------------------------------------------

  InstProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstProto& from);
  void MergeFrom(const InstProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 image_id = 2;
  inline bool has_image_id() const;
  inline void clear_image_id();
  static const int kImageIdFieldNumber = 2;
  inline ::google::protobuf::uint32 image_id() const;
  inline void set_image_id(::google::protobuf::uint32 value);

  // required uint64 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // optional uint32 opcode = 4;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 4;
  inline ::google::protobuf::uint32 opcode() const;
  inline void set_opcode(::google::protobuf::uint32 value);

  // optional .DebugInfoProto debug_info = 5;
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 5;
  inline const ::DebugInfoProto& debug_info() const;
  inline ::DebugInfoProto* mutable_debug_info();
  inline ::DebugInfoProto* release_debug_info();
  inline void set_allocated_debug_info(::DebugInfoProto* debug_info);

  // @@protoc_insertion_point(class_scope:InstProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_image_id();
  inline void clear_has_image_id();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 image_id_;
  ::google::protobuf::uint64 offset_;
  ::DebugInfoProto* debug_info_;
  ::google::protobuf::uint32 opcode_;
  friend void  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto();

  void InitAsDefaultInstance();
  static InstProto* default_instance_;
};
// -------------------------------------------------------------------

class StaticInfoProto : public ::google::protobuf::Message {
 public:
  StaticInfoProto();
  virtual ~StaticInfoProto();

  StaticInfoProto(const StaticInfoProto& from);

  inline StaticInfoProto& operator=(const StaticInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticInfoProto& default_instance();

  void Swap(StaticInfoProto* other);

  // implements Message ----------------------------------------------

  StaticInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticInfoProto& from);
  void MergeFrom(const StaticInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImageProto image = 1;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::ImageProto& image(int index) const;
  inline ::ImageProto* mutable_image(int index);
  inline ::ImageProto* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::ImageProto >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::ImageProto >*
      mutable_image();

  // repeated .InstProto inst = 2;
  inline int inst_size() const;
  inline void clear_inst();
  static const int kInstFieldNumber = 2;
  inline const ::InstProto& inst(int index) const;
  inline ::InstProto* mutable_inst(int index);
  inline ::InstProto* add_inst();
  inline const ::google::protobuf::RepeatedPtrField< ::InstProto >&
      inst() const;
  inline ::google::protobuf::RepeatedPtrField< ::InstProto >*
      mutable_inst();

  // @@protoc_insertion_point(class_scope:StaticInfoProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ImageProto > image_;
  ::google::protobuf::RepeatedPtrField< ::InstProto > inst_;
  friend void  protobuf_AddDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_AssignDesc_core_2fstatic_5finfo_2eproto();
  friend void protobuf_ShutdownFile_core_2fstatic_5finfo_2eproto();

  void InitAsDefaultInstance();
  static StaticInfoProto* default_instance_;
};
// ===================================================================


// ===================================================================

// DebugInfoProto

// required string file_name = 1;
inline bool DebugInfoProto::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugInfoProto::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugInfoProto::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugInfoProto::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& DebugInfoProto::file_name() const {
  // @@protoc_insertion_point(field_get:DebugInfoProto.file_name)
  return *file_name_;
}
inline void DebugInfoProto::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:DebugInfoProto.file_name)
}
inline void DebugInfoProto::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DebugInfoProto.file_name)
}
inline void DebugInfoProto::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DebugInfoProto.file_name)
}
inline ::std::string* DebugInfoProto::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DebugInfoProto.file_name)
  return file_name_;
}
inline ::std::string* DebugInfoProto::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugInfoProto::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DebugInfoProto.file_name)
}

// required int32 line = 2;
inline bool DebugInfoProto::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugInfoProto::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugInfoProto::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugInfoProto::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 DebugInfoProto::line() const {
  // @@protoc_insertion_point(field_get:DebugInfoProto.line)
  return line_;
}
inline void DebugInfoProto::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:DebugInfoProto.line)
}

// required int32 column = 3;
inline bool DebugInfoProto::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugInfoProto::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugInfoProto::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugInfoProto::clear_column() {
  column_ = 0;
  clear_has_column();
}
inline ::google::protobuf::int32 DebugInfoProto::column() const {
  // @@protoc_insertion_point(field_get:DebugInfoProto.column)
  return column_;
}
inline void DebugInfoProto::set_column(::google::protobuf::int32 value) {
  set_has_column();
  column_ = value;
  // @@protoc_insertion_point(field_set:DebugInfoProto.column)
}

// -------------------------------------------------------------------

// ImageProto

// required uint32 id = 1;
inline bool ImageProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ImageProto::id() const {
  // @@protoc_insertion_point(field_get:ImageProto.id)
  return id_;
}
inline void ImageProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ImageProto.id)
}

// required string name = 2;
inline bool ImageProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ImageProto::name() const {
  // @@protoc_insertion_point(field_get:ImageProto.name)
  return *name_;
}
inline void ImageProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ImageProto.name)
}
inline void ImageProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ImageProto.name)
}
inline void ImageProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImageProto.name)
}
inline ::std::string* ImageProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ImageProto.name)
  return name_;
}
inline ::std::string* ImageProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ImageProto.name)
}

// -------------------------------------------------------------------

// InstProto

// required uint32 id = 1;
inline bool InstProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 InstProto::id() const {
  // @@protoc_insertion_point(field_get:InstProto.id)
  return id_;
}
inline void InstProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:InstProto.id)
}

// required uint32 image_id = 2;
inline bool InstProto::has_image_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstProto::set_has_image_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstProto::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstProto::clear_image_id() {
  image_id_ = 0u;
  clear_has_image_id();
}
inline ::google::protobuf::uint32 InstProto::image_id() const {
  // @@protoc_insertion_point(field_get:InstProto.image_id)
  return image_id_;
}
inline void InstProto::set_image_id(::google::protobuf::uint32 value) {
  set_has_image_id();
  image_id_ = value;
  // @@protoc_insertion_point(field_set:InstProto.image_id)
}

// required uint64 offset = 3;
inline bool InstProto::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstProto::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstProto::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 InstProto::offset() const {
  // @@protoc_insertion_point(field_get:InstProto.offset)
  return offset_;
}
inline void InstProto::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:InstProto.offset)
}

// optional uint32 opcode = 4;
inline bool InstProto::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstProto::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstProto::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstProto::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 InstProto::opcode() const {
  // @@protoc_insertion_point(field_get:InstProto.opcode)
  return opcode_;
}
inline void InstProto::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:InstProto.opcode)
}

// optional .DebugInfoProto debug_info = 5;
inline bool InstProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstProto::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstProto::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstProto::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::DebugInfoProto::Clear();
  clear_has_debug_info();
}
inline const ::DebugInfoProto& InstProto::debug_info() const {
  // @@protoc_insertion_point(field_get:InstProto.debug_info)
  return debug_info_ != NULL ? *debug_info_ : *default_instance_->debug_info_;
}
inline ::DebugInfoProto* InstProto::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) debug_info_ = new ::DebugInfoProto;
  // @@protoc_insertion_point(field_mutable:InstProto.debug_info)
  return debug_info_;
}
inline ::DebugInfoProto* InstProto::release_debug_info() {
  clear_has_debug_info();
  ::DebugInfoProto* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline void InstProto::set_allocated_debug_info(::DebugInfoProto* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:InstProto.debug_info)
}

// -------------------------------------------------------------------

// StaticInfoProto

// repeated .ImageProto image = 1;
inline int StaticInfoProto::image_size() const {
  return image_.size();
}
inline void StaticInfoProto::clear_image() {
  image_.Clear();
}
inline const ::ImageProto& StaticInfoProto::image(int index) const {
  // @@protoc_insertion_point(field_get:StaticInfoProto.image)
  return image_.Get(index);
}
inline ::ImageProto* StaticInfoProto::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:StaticInfoProto.image)
  return image_.Mutable(index);
}
inline ::ImageProto* StaticInfoProto::add_image() {
  // @@protoc_insertion_point(field_add:StaticInfoProto.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageProto >&
StaticInfoProto::image() const {
  // @@protoc_insertion_point(field_list:StaticInfoProto.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::ImageProto >*
StaticInfoProto::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:StaticInfoProto.image)
  return &image_;
}

// repeated .InstProto inst = 2;
inline int StaticInfoProto::inst_size() const {
  return inst_.size();
}
inline void StaticInfoProto::clear_inst() {
  inst_.Clear();
}
inline const ::InstProto& StaticInfoProto::inst(int index) const {
  // @@protoc_insertion_point(field_get:StaticInfoProto.inst)
  return inst_.Get(index);
}
inline ::InstProto* StaticInfoProto::mutable_inst(int index) {
  // @@protoc_insertion_point(field_mutable:StaticInfoProto.inst)
  return inst_.Mutable(index);
}
inline ::InstProto* StaticInfoProto::add_inst() {
  // @@protoc_insertion_point(field_add:StaticInfoProto.inst)
  return inst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InstProto >&
StaticInfoProto::inst() const {
  // @@protoc_insertion_point(field_list:StaticInfoProto.inst)
  return inst_;
}
inline ::google::protobuf::RepeatedPtrField< ::InstProto >*
StaticInfoProto::mutable_inst() {
  // @@protoc_insertion_point(field_mutable_list:StaticInfoProto.inst)
  return &inst_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_2fstatic_5finfo_2eproto__INCLUDED
